lyric <- "I like to eat apples and bananas"
# Use the `substr()` function to extract the 1st through 13th letters from the
# `lyric`, and store the result in a variable called `intro`
# Use `?substr` to see more about this function
intro <- substr(lyric, 13)
print(intro)
lyric <- "I like to eat apples and bananas"
# Use the `substr()` function to extract the 1st through 13th letters from the
# `lyric`, and store the result in a variable called `intro`
# Use `?substr` to see more about this function
intro <- substr(lyric,1, 13)
print(intro)
lyric <- "I like to eat apples and bananas"
# Use the `substr()` function to extract the 1st through 13th letters from the
# `lyric`, and store the result in a variable called `intro`
# Use `?substr` to see more about this function
intro <- substr(lyric,1, 13)
print(intro)
# Use the `substr()` function to extract the 15th through the last letter of the
# `lyric`, and store the result in a variable called `fruits`
# Hint: use `nchar()` to determine how many total letters there are!
fruits <- substr(lyric, 15, nchar(lyric))
print(fruits)
print(fruits_e)
fruits_e <- gsub("a", "ee")
print(fruits_e)
lyric <- "I like to eat apples and bananas"
# Use the `substr()` function to extract the 1st through 13th letters from the
# `lyric`, and store the result in a variable called `intro`
# Use `?substr` to see more about this function
intro <- substr(lyric,1, 13)
print(intro)
# Use the `substr()` function to extract the 15th through the last letter of the
# `lyric`, and store the result in a variable called `fruits`
# Hint: use `nchar()` to determine how many total letters there are!
fruits <- substr(lyric, 15, nchar(lyric))
print(fruits)
# Use the `gsub()` function to substitute all the "a"s in `fruits` with "ee".
# Store the result in a variable called `fruits_e`
# Hint: see http://www.endmemo.com/program/R/sub.php for a simpmle example (or
# use `?gsub`)
fruits_e <- gsub("a", "ee")
print(fruits_e)
lyric <- "I like to eat apples and bananas"
# Use the `substr()` function to extract the 1st through 13th letters from the
# `lyric`, and store the result in a variable called `intro`
# Use `?substr` to see more about this function
intro <- substr(lyric,1, 13)
print(intro)
# Use the `substr()` function to extract the 15th through the last letter of the
# `lyric`, and store the result in a variable called `fruits`
# Hint: use `nchar()` to determine how many total letters there are!
fruits <- substr(lyric, 15, nchar(lyric))
print(fruits)
# Use the `gsub()` function to substitute all the "a"s in `fruits` with "ee".
# Store the result in a variable called `fruits_e`
# Hint: see http://www.endmemo.com/program/R/sub.php for a simpmle example (or
# use `?gsub`)
fruits_e <- gsub(lyric, "a", "ee")
print(fruits_e)
lyric <- "I like to eat apples and bananas"
# Use the `substr()` function to extract the 1st through 13th letters from the
# `lyric`, and store the result in a variable called `intro`
# Use `?substr` to see more about this function
intro <- substr(lyric, 1, 13)
print(intro)
# Use the `substr()` function to extract the 15th through the last letter of the
# `lyric`, and store the result in a variable called `fruits`
# Hint: use `nchar()` to determine how many total letters there are!
fruits <- substr(lyric, 15, nchar(lyric))
print(fruits)
# Use the `gsub()` function to substitute all the "a"s in `fruits` with "ee".
# Store the result in a variable called `fruits_e`
# Hint: see http://www.endmemo.com/program/R/sub.php for a simpmle example (or
# use `?gsub`)
fruits_e <- gsub("a", "ee", lyric)
print(fruits_e)
print(fruits_o)
fruits_o <- gsub("a", "o", lyric)
print(fruits_o)
lyric_e <- paste(intro, fruits_e)
print(lyric_e)
# Without making a new variable, print out the `intro` combined with the new
# `fruits_o` ending
print(paste(intro, fruits_o))
# Use the `gsub()` function to substitute all the "a"s in `fruits` with "o".
# Store the result in a variable called `fruits_o`
fruits_o <- gsub("a", "o", fruits)
# Use the `gsub()` function to substitute all the "a"s in `fruits` with "ee".
# Store the result in a variable called `fruits_e`
# Hint: see http://www.endmemo.com/program/R/sub.php for a simpmle example (or
# use `?gsub`)
fruits_e <- gsub("a", "ee", fruits)
# Without making a new variable, print out the `intro` combined with the new
# `fruits_o` ending
print(paste(intro, fruits_o))
# Create a new variable `lyric_e` that is the `intro` combined with the new
# `fruits_e` ending. Print out this variable
lyric_e <- paste(intro, fruits_e)
print(lyric_e)
say_hello <- function(name){
greeting <- paste("Hello", name)
print(greeting)
}
say_hello(Austin)
say_hello(Austin)
say_hello("Austin")
make_full_name <- function(first_name, last_name) {
full_name <- paste(first_name, last_name)
return(full_name)
}
make_full_name("Austin", "Seo")
my_full_name <- make_full_name("Austin", "Seo")
print(my_full_name)
# combine 3 dog names into a vector
dogs <- c("Fido", "Spot", "Sparky")
# create a vector of numbers
numbers <- c(1,2,2,3,5,8,13,21,34) # Fibbonacci
# a vector of the whole numbers from 90 to 100
nineties <- 90:99 # 90 91 92 ,,, 99
# vecotized operations applied element wise (1st with 1st, 2nd wiht 2nd, ...)
v1 <- c(3,1,4,1,5)
v2 <- c(1,6,1,8,0)
v3 <- v1 + v2 # add vectors
v4 <- v1 > v2 # compare vectors
# RECYCLING
v1 <- c(3,1,4,1,5)
v2 <- c(10, 100)
v3 <- v1 + v2 # add the vectors
# RECYCLING
v_1 <- c(3,1,4,1,5)
v_2 <- c(10, 100)
v_3 <- v1 + v2 # add the vectors
# [1] 13 101 14 101 15
v1 <- c(3,1,4,1,5)
v2 <- c(1,6,1,8,0)
v3 <- v1 + v2 # add vectors
# [1] 4 7 5 9 5
v4 <- v1 > v2 # compare vectors
# [1] T F T F T
add_three <- function(num) {
plus_three <- num + 3
return(plus_three)
}
add_three(10)
# Create a variable `ten` that is the result of passing 7 to your `add_three`
# function
ten <- add_three(7)
print(ten)
imperial_to_metric <- function(feet, inches) {
feet_to_meters <- feet * .3048
inches_to_meters <- inches * .0254
meters <- paste(feet, "feet is equal to", feet_to_meters, "and", inches, "inches is equal to", inches_to_meters)
return(meters)
}
imperial_to_metric(10,10)
imperial_to_metric <- function(feet, inches) {
feet_to_meters <- feet * .3048
inches_to_meters <- inches * .0254
meters <- paste(feet, "feet is equal to", feet_to_meters, "meters and", inches, "inches is equal to", inches_to_meters, "meters")
return(meters)
}
imperial_to_metric(10,10)
imperial_to_metric <- function(feet, inches) {
feet_to_meters <- feet * .3048
inches_to_meters <- inches * .0254
meters <- paste(feet_to_meters + inches_to_meters, "meters")
return(meters)
}
imperial_to_metric(10,10)
# Create a variable `height_in_meters` by passing your height in imperial to the
# `imperial_to_metric` function
height_in_meters <- imperial_to_metric(5,8)
print(height_in_meters)
# create a vector of numbers from 0-5
zero_to_five <- 0:5
result <- zero_to_five + 201
print(result)
# EVERYTHING IS A VECTOR
# create a vector of length 1 in variable `x`
x <- 201 # equivalent to `x <- c(201)`
# R states the vector index (1) in the console
print(x) # [1] 201
is.vector(x) #TRUE
identical(201, c(201)) # TRUE
vec <- c(3,1,4,1,5)
doubled <- vec * 2 # double elements
above_three <- vec > 3 # compare elements to 3
print(upper_case)
colors <- c("red", "green", "blue")
# make uppercase
upper_case <- toupper(color)
print(upper_case)
# create vector of colors
colors <- c("red", "green", "blue")
# make uppercase
upper_case <- toupper(colors)
print(upper_case)
colors <- c("red","green","blue")
print(upper_case)
# create vector of 10 random numbers
random <- runif(10)
# round to 2 decimals
rounded <- round(random, 2)
andom <- runif(10)
print(random)
# round to 2 decimals
rounded <- round(random, 2)
print(rounded)
# Create a vector `names` that contains your name and the names of 2 people
# next to you. Print the vector.
names <- c("Austin", "Casey")
# Use the colon operator : to create a vector `n` of numbers from 10:49
n <- 10:49
# Use the `length()` function to get the number of elements in `n`
n_length <- length(n)
# Add 1 to each element in `n` and print the result
n_plus_one <- n + 1
# Create a vector `m` that contains the numbers 10 to 1 (in that order).
# Hint: use the `seq()` function
m <- c(seq(10, 1))
# Subtract `m` FROM `n`. Note the recycling!
m_minus_n <- m - n
print(m_minus_n)
print(m)
print(n_plus_one)
# CH 7 Exercise 1: creating and operating on vectors
# Create a vector `names` that contains your name and the names of 2 people
# next to you. Print the vector.
names <- c("Austin", "Casey")
# Use the colon operator : to create a vector `n` of numbers from 10:49
n <- 10:49
print(n)
# Use the `length()` function to get the number of elements in `n`
n_length <- length(n)
print(n_length)
# Add 1 to each element in `n` and print the result
n_plus_one <- n + 1
print(n_plus_one)
# Create a vector `m` that contains the numbers 10 to 1 (in that order).
# Hint: use the `seq()` function
m <- c(seq(10, 1))
print(m)
# Subtract `m` FROM `n`. Note the recycling!
m_minus_n <- m - n
print(m_minus_n)
# Use the `seq()` function to produce a range of numbers from -5 to 10 in `0.1`
# increments. Store it in a variable `x_range`
# Create a vector `sin_wave` by calling the `sin()` function on each element
# in `x_range`.
# Create a vector `cos_wave` by calling the `cos()` function on each element
# in `x_range`.
# Create a vector `wave` by multiplying `sin_wave` and `cos_wave` together, then
# adding `sin_wave` to the product
# Use the `plot()` function to plot your `wave`!
# Use the `seq()` function to produce a range of numbers from -5 to 10 in `0.1`
# increments. Store it in a variable `x_range`
x_range <- seq(-5, 10, 0.1)
print(x_range)
# Create a vector `sin_wave` by calling the `sin()` function on each element
# in `x_range`.
sin_wave <- c(sin(x_range))
print(sin_wave)
# Create a vector `cos_wave` by calling the `cos()` function on each element
# in `x_range`.
cos_wave <- c(cos(x_range))
print(cos_wave)
# Create a vector `wave` by multiplying `sin_wave` and `cos_wave` together, then
# adding `sin_wave` to the product
wave <- (sin_wave * cos_wave) + sin_wave
print(wave)
# Use the `plot()` function to plot your `wave`!
plot(wave)
# Create a vector `wave` by multiplying `sin_wave` and `cos_wave` together, then
# adding `sin_wave` to the product
wave <- sin_wave * cos_wave + sin_wave
# Use the `plot()` function to plot your `wave`!
plot(wave)
# Create a vector `wave` by multiplying `sin_wave` and `cos_wave` together, then
# adding `sin_wave` to the product
wave <- (sin_wave * cos_wave) + sin_wave
# Create a vector `wave` by multiplying `sin_wave` and `cos_wave` together, then
# adding `sin_wave` to the product
wave <- sin_wave * cos_wave + sin_wave
# Use the `plot()` function to plot your `wave`!
plot(wave)
# VECTOR INDICIES
vowels <- c('a', 'e', 'i', 'o','u')
first_vowel <- vowels[1]
print(vowels)
print(first_vowel)
fourth_vowel <- vowels[4]
print(fourth_vowel)
print(vowels[length(vowels)])
last_index <- length(vowels)
last_vowel <- vowels[last_index]
print(last_vowel)
indicies <- c(1,3,4)
extracted <- vowels[indicies]
print(extracted)
others <- vowels[c(2,5)]
print(others)
vowels[filter]
filter <- c(TRUE,FALSE,FALSE,TRUE,TRUE)
vowels[filter]
shoe_sizes <- c(5.5, 11, 7, 8, 4)
shoe_is_small <- shoe_sizes < 6 # T F F F T
small_shoes <- shoe_sizes[shoe_is_small]
small_shoes1 <- shoe_sizes[shoe_sizes < 6]
print(small_shoes1)
# Create a vector `first_ten` that has the values 10 through 20 in it (using
# the : operator)
first_ten <- 10:20
# Create a vector `next_ten` that has the values 21 through 30 in it (using the
# seq() function)
next_ten <- c(seq(21,30))
# Create a vector `all_numbers` by combining the previous two vectors
all_numbers <- next_ten + fist_ten
# Create a vector `first_ten` that has the values 10 through 20 in it (using
# the : operator)
first_ten <- 10:20
# Create a vector `all_numbers` by combining the previous two vectors
all_numbers <- next_ten + first_ten
# Create a variable `eleventh` that contains the 11th element in `all_numbers`
eleventh <- all_numbers [11]
# Create a vector `some_numbers` that contains the 2nd through the 5th elements
# of `all_numbers`
some_numbers <- all_numbers[2:5]
print(some_numbers)
# Create a vector `even` that holds the even numbers from 1 to 100
even <- 1:100
print(even)
